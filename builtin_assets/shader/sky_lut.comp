//from https://github.com/AKGWSB/RealTimeAtmosphere
#version 450
#extension GL_ARB_separate_shader_objects: enable
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_scalar_block_layout : enable

#include "atmosphere.glsl"

layout(set = 0, binding = 0) uniform VPBlockObject {
    mat4 view;
    mat4 projection;
    vec4 viewPos;
} VPBlock;

vec3 UVToViewDir(vec2 uv)
{
    float theta = (1.0 - uv.y) * PI;
    float phi = (uv.x * 2 - 1) * PI;
    
    float x = sin(theta) * cos(phi);
    float z = sin(theta) * sin(phi);
    float y = cos(theta);

    return vec3(x, y, z);
}

layout (local_size_x = 32, local_size_y = 32, local_size_z = 1) in;
void main(){
    vec4 color = vec4(0, 0, 0, 1);
    vec2 uv = vec2(float((gl_WorkGroupID.x << 5) + gl_LocalInvocationID.x) / 256.0, 
                    float((gl_WorkGroupID.y << 5) + gl_LocalInvocationID.y) / 128.0);
    vec3 viewDir = UVToViewDir(uv);
    
    float h = max(VPBlock.viewPos.y - parameters.seaLevel, 1) + parameters.planetRadius;
    vec3 eyePos = vec3(0, h, 0);

    color.rgb = GetSkyView(eyePos, viewDir, mainLightDir.xyz, -1.0);
    imageStore(skyViewImage, ivec2((gl_WorkGroupID.xy << 5) + gl_LocalInvocationID.xy), color);
}